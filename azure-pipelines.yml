trigger:
- main

pool:
  # for local server to build
  name: 'local'

variables:
  TF_VERSION: 'v1.5.7'
  ARM_CLIENT_ID: $(armClientId)
  ARM_CLIENT_SECRET: $(armClientSecret)
  ARM_SUBSCRIPTION_ID: $(armSubscriptionId)
  ARM_TENANT_ID: $(armTenantId)
  # Docker image name
  # imageName: 'myacrregistry.azurecr.io/service'

  # Azure Container Registry details
  # acrLoginServer: 'myacrregistry.azurecr.io'
  # acrUsername: "***"
  # acrPassword: "***"

  # # AKS details
  # aksCluster: 'myAKSCluster'
  # aksResourceGroup: 'myResourceGroup'
  # kubernetesNamespace: 'default'

jobs:
- job: Myjob
  displayName: 'My Job'
  strategy:
    parallel: 1
  steps:
  - task: TerraformInstaller@0
    inputs:
      terraformVersion: '$(TF_VERSION)'
    displayName: 'Install Terraform'

  - script: |
      terraform init
      terraform plan -out=tfplan -input=false
    displayName: 'Terraform init and plan'

  - script: |
      terraform apply tfplan
    displayName: 'Terraform apply'


# if k8s deployed, used the script blew
# - script: |
#     docker build -t $(imageName)1:$(Build.BuildId) -f service1/Dockerfile .
#     docker build -t $(imageName)2:$(Build.BuildId) -f service2/Dockerfile .
#     docker build -t $(imageName)3:$(Build.BuildId) -f service3/Dockerfile .
#   displayName: 'Build Docker images'

# - task: Docker@2
#   inputs:
#     containerRegistry: 'myacrregistry'
#     repository: 'service1'
#     command: 'push'
#     dockerfile: 'service1/Dockerfile'
#     tags: |
#       $(Build.BuildId)
#   displayName: 'Push service1 Docker image to ACR'

# - task: Docker@2
#   inputs:
#     containerRegistry: 'myacrregistry'
#     repository: 'service2'
#     command: 'push'
#     dockerfile: 'service2/Dockerfile'
#     tags: |
#       $(Build.BuildId)
#   displayName: 'Push service2 Docker image to ACR'

# - task: Docker@2
#   inputs:
#     containerRegistry: 'myacrregistry'
#     repository: 'service3'
#     command: 'push'
#     dockerfile: 'service3/Dockerfile'
#     tags: |
#       $(Build.BuildId)
#   displayName: 'Push service3 Docker image to ACR'

# - task: AzureCLI@2
#   inputs:
#     azureSubscription: 'MyAzureSubscription'
#     scriptType: 'bash'
#     scriptLocation: 'inlineScript'
#     inlineScript: |
#       az aks get-credentials --resource-group $(aksResourceGroup) --name $(aksCluster)
#       kubectl apply -f k8s-deployment.yml
#   displayName: 'Deploy to AKS'
